# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\ui\FlashCardWidget.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from Deck import *
from Logger import MyLogger

class Ui_FlashCardWidget(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(317, 249)
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.topText = QtWidgets.QTextBrowser(Form)
        self.topText.setObjectName("topText")
        self.verticalLayout.addWidget(self.topText)
        self.bottomText = QtWidgets.QTextBrowser(Form)
        self.bottomText.setEnabled(False)
        self.bottomText.setObjectName("bottomText")
        self.verticalLayout.addWidget(self.bottomText)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.prevButton = QtWidgets.QPushButton(Form)
        self.prevButton.setObjectName("prevButton")
        self.horizontalLayout.addWidget(self.prevButton)
        self.revealButton = QtWidgets.QPushButton(Form)
        self.revealButton.setObjectName("revealButton")
        self.horizontalLayout.addWidget(self.revealButton)
        self.nextButton = QtWidgets.QPushButton(Form)
        self.nextButton.setObjectName("nextButton")
        self.nextButton.clicked.connect(lambda x:self.nextCard())
        self.revealButton.clicked.connect(lambda x:self.revealCard())
        self.prevButton.clicked.connect(lambda x:self.prevCard())
        self.horizontalLayout.addWidget(self.nextButton)
        self.verticalLayout.addLayout(self.horizontalLayout)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def __init__(self, deck, parent, logger:MyLogger):
        self.logger = logger
        self.deck = deck

        self.parent = parent

        self.currentCardId = 0
        self.currentCard = self.deck.cards[self.currentCardId]

        if self.currentCard == None:
            self.logger.error("Deck " + self.deck.name + " has no cards")
            raise Exception("Empty deck")

        self.totalLength = len(self.deck.cards)

        self.logger.info("Initialized FlashCardWidget")

    def loadCard(self):

        self.logger.info("Loading card data, front:" + self.currentCard.front_data + " back:" + self.currentCard.back_data + " current index:" + str(self.currentCardId))
        self.topText.setText(self.currentCard.front_data)
        self.bottomText.setText("")
        self.bottomText.setEnabled(False)

    def nextCard(self):

        if self.currentCardId == self.totalLength -1:
            #self.parent.setEnabled(True)
            pass
        else:

            self.currentCardId = self.currentCardId + 1
            self.currentCard = self.deck.getCard(self.currentCardId)

            self.loadCard()
    
    def revealCard(self):
        self.bottomText.setEnabled(True)
        self.bottomText.setText(self.currentCard.back_data)

    def prevCard(self):

        if self.currentCardId == 0:
            pass
        else:
            self.currentCardId = self.currentCardId - 1
            self.currentCard = self.deck.getCard(self.currentCardId)

            self.loadCard()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.prevButton.setText(_translate("Form", "Prev"))
        self.revealButton.setText(_translate("Form", "Reveal"))
        self.nextButton.setText(_translate("Form", "Next"))

    def closeEvent(self, event):
        self.logger.info("User has closed the FlashCardWidget")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_FlashCardWidget()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
